using System;
using System.Collections.Generic;
using System.IO;
using Terraria;
using TerrariaApi.Server;
using TShockAPI;
using TShockAPI.Hooks;

namespace SuperPluginRPG
{
    [ApiVersion(2, 1)]
    public class SuperPlugin : TerrariaPlugin
    {
        public override string Name => "SuperPlugin RPG";
        public override string Author => "Tu Asistente IA";
        public override string Description => "Sistema de experiencia, niveles, clases, desbloqueos y división de mundos.";
        public override Version Version => new Version(1, 0, 0);

        private string configPath = Path.Combine(TShock.SavePath, "SuperPluginConfig.json");
        private SuperConfig config;
        private Dictionary<int, PlayerData> players = new Dictionary<int, PlayerData>();

        public SuperPlugin(Main game) : base(game) { }

        public override void Initialize()
        {
            ServerApi.Hooks.NetGreetPlayer.Register(this, OnJoin);
            ServerApi.Hooks.ServerLeave.Register(this, OnLeave);
            GetDataHandlers.KillMe += OnPlayerDeath;
            GetDataHandlers.PlayerDamage += OnPlayerDamage;

            Commands.ChatCommands.Add(new Command("superplugin.class", CmdClass, "elegirclase"));
            Commands.ChatCommands.Add(new Command("superplugin.info", CmdInfo, "nivel"));
        }

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                ServerApi.Hooks.NetGreetPlayer.Deregister(this, OnJoin);
                ServerApi.Hooks.ServerLeave.Deregister(this, OnLeave);
                GetDataHandlers.KillMe -= OnPlayerDeath;
                GetDataHandlers.PlayerDamage -= OnPlayerDamage;
            }
            base.Dispose(disposing);
        }

        private void OnJoin(GreetPlayerEventArgs args)
        {
            int id = args.Who;
            if (!players.ContainsKey(id))
            {
                players[id] = new PlayerData();
            }
            TSPlayer.All.SendMessage($"[SuperRPG] Bienvenido {TShock.Players[id].Name}. Nivel: {players[id].Level}, Exp: {players[id].Exp}", Microsoft.Xna.Framework.Color.LightGreen);
        }

        private void OnLeave(LeaveEventArgs args)
        {
            players.Remove(args.Who);
        }

        private void OnPlayerDeath(object sender, GetDataHandlers.KillMeEventArgs args)
        {
            // Aquí se podrían aplicar castigos de pérdida de exp o similar si quieres
        }

        private void OnPlayerDamage(object sender, GetDataHandlers.PlayerDamageEventArgs args)
        {
            // Si daña a un NPC, sumar exp proporcional (simplificado aquí)
            if (args.Damage > 0 && Main.npc[args.ID] != null)
            {
                var npc = Main.npc[args.ID];
                if (npc.life <= 0 && !npc.friendly)
                {
                    int expGain = npc.lifeMax / 10; // exp básica
                    var plr = TShock.Players[args.PlayerId];
                    if (plr != null && plr.Active && players.ContainsKey(plr.Index))
                    {
                        players[plr.Index].AddExp(expGain, plr);
                    }
                }
            }
        }

        private void CmdClass(CommandArgs args)
        {
            var plr = args.Player;
            var data = players[plr.Index];

            if (data.Level < 50)
            {
                plr.SendErrorMessage("[SuperRPG] Necesitas nivel 50 para elegir una clase.");
                return;
            }

            if (!string.IsNullOrEmpty(data.Class))
            {
                plr.SendErrorMessage("[SuperRPG] Ya elegiste una clase.");
                return;
            }

            if (args.Parameters.Count == 0)
            {
                plr.SendMessage("Usa /elegirclase <guerrero|mago|arquero|invocador>", Microsoft.Xna.Framework.Color.Yellow);
                return;
            }

            string choice = args.Parameters[0].ToLower();
            if (choice == "guerrero" || choice == "mago" || choice == "arquero" || choice == "invocador")
            {
                data.Class = choice;
                plr.SendMessage($"[SuperRPG] Ahora eres {choice.ToUpper()}.", Microsoft.Xna.Framework.Color.LightGreen);
            }
            else
            {
                plr.SendErrorMessage("Clase inválida. Usa: guerrero, mago, arquero, invocador.");
            }
        }

        private void CmdInfo(CommandArgs args)
        {
            var plr = args.Player;
            var data = players[plr.Index];
            plr.SendMessage($"[SuperRPG] Nivel: {data.Level} | Exp: {data.Exp}/{data.ExpNeeded()} | Clase: {(string.IsNullOrEmpty(data.Class) ? "Ninguna" : data.Class)}", Microsoft.Xna.Framework.Color.Aqua);
        }

        private class PlayerData
        {
            public int Level { get; set; } = 1;
            public int Exp { get; set; } = 0;
            public string Class { get; set; } = "";

            public void AddExp(int amount, TSPlayer plr)
            {
                Exp += amount;
                while (Exp >= ExpNeeded() && Level < 200)
                {
                    Exp -= ExpNeeded();
                    Level++;
                    plr.SendMessage($"[SuperRPG] ¡Has subido a nivel {Level}!", Microsoft.Xna.Framework.Color.LightGreen);
                }

                if (Level == 200)
                {
                    plr.SendMessage("[SuperRPG] ¡Felicidades! Desbloqueaste el comando /give.", Microsoft.Xna.Framework.Color.Gold);
                }
            }

            public int ExpNeeded()
            {
                return 1000 + (Level * 500);
            }
        }

        private class SuperConfig
        {
            public List<string> Unlocks { get; set; } = new List<string>();
        }
    }
}
